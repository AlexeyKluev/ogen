// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func NewGetServiceAccountIssuerOpenIDConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetServiceAccountIssuerOpenIDConfiguration(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetServiceAccountIssuerOpenIDConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetCoreAPIVersionsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetCoreAPIVersions(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetCoreAPIVersionsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetCoreV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetCoreV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetCoreV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1ComponentStatusHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1ComponentStatus(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1ComponentStatusResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1ConfigMapForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1ConfigMapForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1ConfigMapForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1EndpointsForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1EndpointsForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1EndpointsForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1EventForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1EventForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1EventForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1LimitRangeForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1LimitRangeForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1LimitRangeForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1NamespaceHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListCoreV1NamespaceParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListCoreV1Namespace(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1NamespaceResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateCoreV1NamespaceHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateCoreV1NamespaceParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateCoreV1NamespaceRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateCoreV1Namespace(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateCoreV1NamespaceResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1NodeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListCoreV1NodeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListCoreV1Node(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1NodeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateCoreV1NodeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateCoreV1NodeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateCoreV1NodeRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateCoreV1Node(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateCoreV1NodeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteCoreV1CollectionNodeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteCoreV1CollectionNodeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteCoreV1CollectionNodeRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteCoreV1CollectionNode(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteCoreV1CollectionNodeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1PersistentVolumeClaimForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1PersistentVolumeClaimForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1PersistentVolumeClaimForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1PersistentVolumeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListCoreV1PersistentVolumeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListCoreV1PersistentVolume(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1PersistentVolumeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateCoreV1PersistentVolumeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateCoreV1PersistentVolumeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateCoreV1PersistentVolumeRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateCoreV1PersistentVolume(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateCoreV1PersistentVolumeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteCoreV1CollectionPersistentVolumeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteCoreV1CollectionPersistentVolumeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteCoreV1CollectionPersistentVolumeRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteCoreV1CollectionPersistentVolume(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteCoreV1CollectionPersistentVolumeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1PodForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1PodForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1PodForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1PodTemplateForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1PodTemplateForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1PodTemplateForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1ReplicationControllerForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1ReplicationControllerForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1ReplicationControllerForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1ResourceQuotaForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1ResourceQuotaForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1ResourceQuotaForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1SecretForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1SecretForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1SecretForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1ServiceAccountForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1ServiceAccountForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1ServiceAccountForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoreV1ServiceForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoreV1ServiceForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoreV1ServiceForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1ConfigMapListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1ConfigMapListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1ConfigMapListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1EndpointsListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1EndpointsListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1EndpointsListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1EventListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1EventListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1EventListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1LimitRangeListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1LimitRangeListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1LimitRangeListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1NamespaceListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1NamespaceList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1NamespaceListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1NodeListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1NodeList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1NodeListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1PersistentVolumeClaimListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1PersistentVolumeClaimListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1PersistentVolumeListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1PersistentVolumeList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1PersistentVolumeListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1PodListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1PodListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1PodListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1PodTemplateListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1PodTemplateListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1PodTemplateListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1ReplicationControllerListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1ReplicationControllerListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1ReplicationControllerListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1ResourceQuotaListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1ResourceQuotaListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1ResourceQuotaListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1SecretListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1SecretListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1SecretListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1ServiceAccountListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1ServiceAccountListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1ServiceAccountListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoreV1ServiceListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoreV1ServiceListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoreV1ServiceListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAPIVersionsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAPIVersions(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAPIVersionsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAdmissionregistrationAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAdmissionregistrationAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAdmissionregistrationAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAdmissionregistrationV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAdmissionregistrationV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAdmissionregistrationV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAdmissionregistrationV1MutatingWebhookConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListAdmissionregistrationV1MutatingWebhookConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListAdmissionregistrationV1MutatingWebhookConfiguration(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAdmissionregistrationV1MutatingWebhookConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateAdmissionregistrationV1MutatingWebhookConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateAdmissionregistrationV1MutatingWebhookConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateAdmissionregistrationV1MutatingWebhookConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateAdmissionregistrationV1MutatingWebhookConfiguration(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateAdmissionregistrationV1MutatingWebhookConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAdmissionregistrationV1ValidatingWebhookConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListAdmissionregistrationV1ValidatingWebhookConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListAdmissionregistrationV1ValidatingWebhookConfiguration(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateAdmissionregistrationV1ValidatingWebhookConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateAdmissionregistrationV1ValidatingWebhookConfiguration(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAdmissionregistrationV1MutatingWebhookConfigurationListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAdmissionregistrationV1MutatingWebhookConfigurationList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAdmissionregistrationV1ValidatingWebhookConfigurationList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetApiextensionsAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetApiextensionsAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetApiextensionsAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetApiextensionsV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetApiextensionsV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetApiextensionsV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListApiextensionsV1CustomResourceDefinitionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListApiextensionsV1CustomResourceDefinitionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListApiextensionsV1CustomResourceDefinition(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListApiextensionsV1CustomResourceDefinitionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateApiextensionsV1CustomResourceDefinitionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateApiextensionsV1CustomResourceDefinitionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateApiextensionsV1CustomResourceDefinitionRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateApiextensionsV1CustomResourceDefinition(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateApiextensionsV1CustomResourceDefinitionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteApiextensionsV1CollectionCustomResourceDefinitionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteApiextensionsV1CollectionCustomResourceDefinitionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteApiextensionsV1CollectionCustomResourceDefinitionRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteApiextensionsV1CollectionCustomResourceDefinition(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteApiextensionsV1CollectionCustomResourceDefinitionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchApiextensionsV1CustomResourceDefinitionListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchApiextensionsV1CustomResourceDefinitionList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchApiextensionsV1CustomResourceDefinitionListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetApiregistrationAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetApiregistrationAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetApiregistrationAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetApiregistrationV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetApiregistrationV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetApiregistrationV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListApiregistrationV1APIServiceHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListApiregistrationV1APIServiceParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListApiregistrationV1APIService(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListApiregistrationV1APIServiceResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateApiregistrationV1APIServiceHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateApiregistrationV1APIServiceParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateApiregistrationV1APIServiceRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateApiregistrationV1APIService(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateApiregistrationV1APIServiceResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteApiregistrationV1CollectionAPIServiceHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteApiregistrationV1CollectionAPIServiceParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteApiregistrationV1CollectionAPIServiceRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteApiregistrationV1CollectionAPIService(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteApiregistrationV1CollectionAPIServiceResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchApiregistrationV1APIServiceListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchApiregistrationV1APIServiceList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchApiregistrationV1APIServiceListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAppsAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAppsAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAppsAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAppsV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAppsV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAppsV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAppsV1ControllerRevisionForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListAppsV1ControllerRevisionForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAppsV1ControllerRevisionForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAppsV1DaemonSetForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListAppsV1DaemonSetForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAppsV1DaemonSetForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAppsV1DeploymentForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListAppsV1DeploymentForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAppsV1DeploymentForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAppsV1ReplicaSetForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListAppsV1ReplicaSetForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAppsV1ReplicaSetForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAppsV1StatefulSetForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListAppsV1StatefulSetForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAppsV1StatefulSetForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAppsV1ControllerRevisionListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAppsV1ControllerRevisionListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAppsV1ControllerRevisionListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAppsV1DaemonSetListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAppsV1DaemonSetListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAppsV1DaemonSetListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAppsV1DeploymentListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAppsV1DeploymentListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAppsV1DeploymentListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAppsV1ReplicaSetListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAppsV1ReplicaSetListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAppsV1ReplicaSetListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAppsV1StatefulSetListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAppsV1StatefulSetListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAppsV1StatefulSetListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAuthenticationAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAuthenticationAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAuthenticationAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAuthenticationV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAuthenticationV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAuthenticationV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateAuthenticationV1TokenReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeCreateAuthenticationV1TokenReviewRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateAuthenticationV1TokenReview(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateAuthenticationV1TokenReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAuthorizationAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAuthorizationAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAuthorizationAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAuthorizationV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAuthorizationV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAuthorizationV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateAuthorizationV1SelfSubjectAccessReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeCreateAuthorizationV1SelfSubjectAccessReviewRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateAuthorizationV1SelfSubjectAccessReview(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateAuthorizationV1SelfSubjectAccessReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateAuthorizationV1SelfSubjectRulesReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeCreateAuthorizationV1SelfSubjectRulesReviewRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateAuthorizationV1SelfSubjectRulesReview(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateAuthorizationV1SelfSubjectRulesReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateAuthorizationV1SubjectAccessReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeCreateAuthorizationV1SubjectAccessReviewRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateAuthorizationV1SubjectAccessReview(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateAuthorizationV1SubjectAccessReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAutoscalingAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAutoscalingAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAutoscalingAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAutoscalingV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAutoscalingV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAutoscalingV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAutoscalingV2beta1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAutoscalingV2beta1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAutoscalingV2beta1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetAutoscalingV2beta2APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetAutoscalingV2beta2APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetAutoscalingV2beta2APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetBatchAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetBatchAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetBatchAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetBatchV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetBatchV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetBatchV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListBatchV1CronJobForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListBatchV1CronJobForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListBatchV1CronJobForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListBatchV1JobForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListBatchV1JobForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListBatchV1JobForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchBatchV1CronJobListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchBatchV1CronJobListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchBatchV1CronJobListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchBatchV1JobListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchBatchV1JobListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchBatchV1JobListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetBatchV1beta1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetBatchV1beta1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetBatchV1beta1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListBatchV1beta1CronJobForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListBatchV1beta1CronJobForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListBatchV1beta1CronJobForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchBatchV1beta1CronJobListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchBatchV1beta1CronJobListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchBatchV1beta1CronJobListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetCertificatesAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetCertificatesAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetCertificatesAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetCertificatesV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetCertificatesV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetCertificatesV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCertificatesV1CertificateSigningRequestHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListCertificatesV1CertificateSigningRequestParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListCertificatesV1CertificateSigningRequest(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCertificatesV1CertificateSigningRequestResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateCertificatesV1CertificateSigningRequestHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateCertificatesV1CertificateSigningRequestParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateCertificatesV1CertificateSigningRequestRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateCertificatesV1CertificateSigningRequest(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateCertificatesV1CertificateSigningRequestResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteCertificatesV1CollectionCertificateSigningRequestHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteCertificatesV1CollectionCertificateSigningRequestParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteCertificatesV1CollectionCertificateSigningRequestRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteCertificatesV1CollectionCertificateSigningRequest(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteCertificatesV1CollectionCertificateSigningRequestResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCertificatesV1CertificateSigningRequestListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCertificatesV1CertificateSigningRequestList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCertificatesV1CertificateSigningRequestListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetCoordinationAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetCoordinationAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetCoordinationAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetCoordinationV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetCoordinationV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetCoordinationV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListCoordinationV1LeaseForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListCoordinationV1LeaseForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListCoordinationV1LeaseForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchCoordinationV1LeaseListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchCoordinationV1LeaseListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchCoordinationV1LeaseListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetDiscoveryAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetDiscoveryAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetDiscoveryAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetDiscoveryV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetDiscoveryV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetDiscoveryV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListDiscoveryV1EndpointSliceForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListDiscoveryV1EndpointSliceForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListDiscoveryV1EndpointSliceForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchDiscoveryV1EndpointSliceListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchDiscoveryV1EndpointSliceListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchDiscoveryV1EndpointSliceListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetDiscoveryV1beta1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetDiscoveryV1beta1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetDiscoveryV1beta1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListDiscoveryV1beta1EndpointSliceForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListDiscoveryV1beta1EndpointSliceForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetEventsAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetEventsAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetEventsAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetEventsV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetEventsV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetEventsV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListEventsV1EventForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListEventsV1EventForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListEventsV1EventForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchEventsV1EventListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchEventsV1EventListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchEventsV1EventListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetEventsV1beta1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetEventsV1beta1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetEventsV1beta1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListEventsV1beta1EventForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListEventsV1beta1EventForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListEventsV1beta1EventForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchEventsV1beta1EventListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchEventsV1beta1EventListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchEventsV1beta1EventListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetFlowcontrolApiserverAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetFlowcontrolApiserverAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetFlowcontrolApiserverAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetFlowcontrolApiserverV1beta1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetFlowcontrolApiserverV1beta1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetFlowcontrolApiserverV1beta1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListFlowcontrolApiserverV1beta1FlowSchemaHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListFlowcontrolApiserverV1beta1FlowSchemaParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListFlowcontrolApiserverV1beta1FlowSchema(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListFlowcontrolApiserverV1beta1FlowSchemaResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateFlowcontrolApiserverV1beta1FlowSchemaHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateFlowcontrolApiserverV1beta1FlowSchemaParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateFlowcontrolApiserverV1beta1FlowSchemaRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateFlowcontrolApiserverV1beta1FlowSchema(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateFlowcontrolApiserverV1beta1FlowSchemaResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteFlowcontrolApiserverV1beta1CollectionFlowSchema(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListFlowcontrolApiserverV1beta1PriorityLevelConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateFlowcontrolApiserverV1beta1PriorityLevelConfiguration(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfiguration(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchFlowcontrolApiserverV1beta1FlowSchemaListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchFlowcontrolApiserverV1beta1FlowSchemaList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchFlowcontrolApiserverV1beta1FlowSchemaListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetFlowcontrolApiserverV1beta2APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetFlowcontrolApiserverV1beta2APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetFlowcontrolApiserverV1beta2APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListFlowcontrolApiserverV1beta2FlowSchemaHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListFlowcontrolApiserverV1beta2FlowSchemaParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListFlowcontrolApiserverV1beta2FlowSchema(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListFlowcontrolApiserverV1beta2FlowSchemaResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateFlowcontrolApiserverV1beta2FlowSchemaHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateFlowcontrolApiserverV1beta2FlowSchemaParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateFlowcontrolApiserverV1beta2FlowSchemaRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateFlowcontrolApiserverV1beta2FlowSchema(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateFlowcontrolApiserverV1beta2FlowSchemaResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteFlowcontrolApiserverV1beta2CollectionFlowSchema(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListFlowcontrolApiserverV1beta2PriorityLevelConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateFlowcontrolApiserverV1beta2PriorityLevelConfiguration(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchFlowcontrolApiserverV1beta2FlowSchemaListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchFlowcontrolApiserverV1beta2FlowSchemaList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchFlowcontrolApiserverV1beta2FlowSchemaListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetInternalApiserverAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetInternalApiserverAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetInternalApiserverAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetInternalApiserverV1alpha1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetInternalApiserverV1alpha1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetInternalApiserverV1alpha1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListInternalApiserverV1alpha1StorageVersionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListInternalApiserverV1alpha1StorageVersionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListInternalApiserverV1alpha1StorageVersion(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListInternalApiserverV1alpha1StorageVersionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateInternalApiserverV1alpha1StorageVersionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateInternalApiserverV1alpha1StorageVersionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateInternalApiserverV1alpha1StorageVersionRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateInternalApiserverV1alpha1StorageVersion(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateInternalApiserverV1alpha1StorageVersionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteInternalApiserverV1alpha1CollectionStorageVersionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteInternalApiserverV1alpha1CollectionStorageVersionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteInternalApiserverV1alpha1CollectionStorageVersionRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteInternalApiserverV1alpha1CollectionStorageVersion(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteInternalApiserverV1alpha1CollectionStorageVersionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchInternalApiserverV1alpha1StorageVersionListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchInternalApiserverV1alpha1StorageVersionList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchInternalApiserverV1alpha1StorageVersionListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetNetworkingAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetNetworkingAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetNetworkingAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetNetworkingV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetNetworkingV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetNetworkingV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListNetworkingV1IngressClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListNetworkingV1IngressClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListNetworkingV1IngressClass(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListNetworkingV1IngressClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateNetworkingV1IngressClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateNetworkingV1IngressClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateNetworkingV1IngressClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateNetworkingV1IngressClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateNetworkingV1IngressClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteNetworkingV1CollectionIngressClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteNetworkingV1CollectionIngressClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteNetworkingV1CollectionIngressClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteNetworkingV1CollectionIngressClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteNetworkingV1CollectionIngressClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListNetworkingV1IngressForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListNetworkingV1IngressForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListNetworkingV1IngressForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListNetworkingV1NetworkPolicyForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListNetworkingV1NetworkPolicyForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListNetworkingV1NetworkPolicyForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchNetworkingV1IngressClassListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchNetworkingV1IngressClassList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchNetworkingV1IngressClassListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchNetworkingV1IngressListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchNetworkingV1IngressListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchNetworkingV1IngressListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchNetworkingV1NetworkPolicyListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchNetworkingV1NetworkPolicyListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchNetworkingV1NetworkPolicyListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetNodeAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetNodeAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetNodeAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetNodeV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetNodeV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetNodeV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListNodeV1RuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListNodeV1RuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListNodeV1RuntimeClass(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListNodeV1RuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateNodeV1RuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateNodeV1RuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateNodeV1RuntimeClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateNodeV1RuntimeClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateNodeV1RuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteNodeV1CollectionRuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteNodeV1CollectionRuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteNodeV1CollectionRuntimeClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteNodeV1CollectionRuntimeClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteNodeV1CollectionRuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchNodeV1RuntimeClassListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchNodeV1RuntimeClassList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchNodeV1RuntimeClassListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetNodeV1alpha1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetNodeV1alpha1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetNodeV1alpha1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListNodeV1alpha1RuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListNodeV1alpha1RuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListNodeV1alpha1RuntimeClass(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListNodeV1alpha1RuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateNodeV1alpha1RuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateNodeV1alpha1RuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateNodeV1alpha1RuntimeClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateNodeV1alpha1RuntimeClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateNodeV1alpha1RuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteNodeV1alpha1CollectionRuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteNodeV1alpha1CollectionRuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteNodeV1alpha1CollectionRuntimeClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteNodeV1alpha1CollectionRuntimeClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteNodeV1alpha1CollectionRuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchNodeV1alpha1RuntimeClassListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchNodeV1alpha1RuntimeClassList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchNodeV1alpha1RuntimeClassListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetNodeV1beta1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetNodeV1beta1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetNodeV1beta1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListNodeV1beta1RuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListNodeV1beta1RuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListNodeV1beta1RuntimeClass(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListNodeV1beta1RuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateNodeV1beta1RuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateNodeV1beta1RuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateNodeV1beta1RuntimeClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateNodeV1beta1RuntimeClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateNodeV1beta1RuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteNodeV1beta1CollectionRuntimeClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteNodeV1beta1CollectionRuntimeClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteNodeV1beta1CollectionRuntimeClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteNodeV1beta1CollectionRuntimeClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteNodeV1beta1CollectionRuntimeClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchNodeV1beta1RuntimeClassListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchNodeV1beta1RuntimeClassList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchNodeV1beta1RuntimeClassListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetPolicyAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetPolicyAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetPolicyAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetPolicyV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetPolicyV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetPolicyV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListPolicyV1PodDisruptionBudgetForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListPolicyV1PodDisruptionBudgetForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListPolicyV1PodDisruptionBudgetForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchPolicyV1PodDisruptionBudgetListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchPolicyV1PodDisruptionBudgetListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetPolicyV1beta1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetPolicyV1beta1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetPolicyV1beta1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListPolicyV1beta1PodSecurityPolicyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListPolicyV1beta1PodSecurityPolicyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListPolicyV1beta1PodSecurityPolicy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListPolicyV1beta1PodSecurityPolicyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreatePolicyV1beta1PodSecurityPolicyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreatePolicyV1beta1PodSecurityPolicyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreatePolicyV1beta1PodSecurityPolicyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreatePolicyV1beta1PodSecurityPolicy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreatePolicyV1beta1PodSecurityPolicyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeletePolicyV1beta1CollectionPodSecurityPolicyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeletePolicyV1beta1CollectionPodSecurityPolicyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeletePolicyV1beta1CollectionPodSecurityPolicyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeletePolicyV1beta1CollectionPodSecurityPolicy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeletePolicyV1beta1CollectionPodSecurityPolicyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchPolicyV1beta1PodSecurityPolicyListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchPolicyV1beta1PodSecurityPolicyList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchPolicyV1beta1PodSecurityPolicyListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetRbacAuthorizationAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetRbacAuthorizationAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetRbacAuthorizationAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetRbacAuthorizationV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetRbacAuthorizationV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetRbacAuthorizationV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListRbacAuthorizationV1ClusterRoleBindingHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListRbacAuthorizationV1ClusterRoleBindingParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListRbacAuthorizationV1ClusterRoleBinding(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListRbacAuthorizationV1ClusterRoleBindingResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateRbacAuthorizationV1ClusterRoleBindingHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateRbacAuthorizationV1ClusterRoleBindingParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateRbacAuthorizationV1ClusterRoleBindingRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateRbacAuthorizationV1ClusterRoleBinding(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateRbacAuthorizationV1ClusterRoleBindingResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteRbacAuthorizationV1CollectionClusterRoleBinding(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListRbacAuthorizationV1ClusterRoleHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListRbacAuthorizationV1ClusterRoleParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListRbacAuthorizationV1ClusterRole(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListRbacAuthorizationV1ClusterRoleResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateRbacAuthorizationV1ClusterRoleHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateRbacAuthorizationV1ClusterRoleParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateRbacAuthorizationV1ClusterRoleRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateRbacAuthorizationV1ClusterRole(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateRbacAuthorizationV1ClusterRoleResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteRbacAuthorizationV1CollectionClusterRoleHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteRbacAuthorizationV1CollectionClusterRoleParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteRbacAuthorizationV1CollectionClusterRoleRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteRbacAuthorizationV1CollectionClusterRole(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteRbacAuthorizationV1CollectionClusterRoleResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListRbacAuthorizationV1RoleBindingForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListRbacAuthorizationV1RoleBindingForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListRbacAuthorizationV1RoleBindingForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListRbacAuthorizationV1RoleForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListRbacAuthorizationV1RoleForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListRbacAuthorizationV1RoleForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchRbacAuthorizationV1ClusterRoleBindingListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchRbacAuthorizationV1ClusterRoleBindingList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchRbacAuthorizationV1ClusterRoleBindingListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchRbacAuthorizationV1ClusterRoleListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchRbacAuthorizationV1ClusterRoleList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchRbacAuthorizationV1ClusterRoleListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchRbacAuthorizationV1RoleBindingListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchRbacAuthorizationV1RoleListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchRbacAuthorizationV1RoleListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchRbacAuthorizationV1RoleListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetSchedulingAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetSchedulingAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetSchedulingAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetSchedulingV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetSchedulingV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetSchedulingV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListSchedulingV1PriorityClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListSchedulingV1PriorityClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListSchedulingV1PriorityClass(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListSchedulingV1PriorityClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateSchedulingV1PriorityClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateSchedulingV1PriorityClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateSchedulingV1PriorityClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateSchedulingV1PriorityClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateSchedulingV1PriorityClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteSchedulingV1CollectionPriorityClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteSchedulingV1CollectionPriorityClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteSchedulingV1CollectionPriorityClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteSchedulingV1CollectionPriorityClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteSchedulingV1CollectionPriorityClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchSchedulingV1PriorityClassListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchSchedulingV1PriorityClassList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchSchedulingV1PriorityClassListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetStorageAPIGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetStorageAPIGroup(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetStorageAPIGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetStorageV1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetStorageV1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetStorageV1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListStorageV1CSIDriverHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListStorageV1CSIDriverParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListStorageV1CSIDriver(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListStorageV1CSIDriverResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateStorageV1CSIDriverHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateStorageV1CSIDriverParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateStorageV1CSIDriverRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateStorageV1CSIDriver(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateStorageV1CSIDriverResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteStorageV1CollectionCSIDriverHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteStorageV1CollectionCSIDriverParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteStorageV1CollectionCSIDriverRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteStorageV1CollectionCSIDriver(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteStorageV1CollectionCSIDriverResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListStorageV1CSINodeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListStorageV1CSINodeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListStorageV1CSINode(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListStorageV1CSINodeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateStorageV1CSINodeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateStorageV1CSINodeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateStorageV1CSINodeRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateStorageV1CSINode(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateStorageV1CSINodeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteStorageV1CollectionCSINodeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteStorageV1CollectionCSINodeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteStorageV1CollectionCSINodeRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteStorageV1CollectionCSINode(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteStorageV1CollectionCSINodeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListStorageV1StorageClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListStorageV1StorageClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListStorageV1StorageClass(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListStorageV1StorageClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateStorageV1StorageClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateStorageV1StorageClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateStorageV1StorageClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateStorageV1StorageClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateStorageV1StorageClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteStorageV1CollectionStorageClassHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteStorageV1CollectionStorageClassParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteStorageV1CollectionStorageClassRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteStorageV1CollectionStorageClass(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteStorageV1CollectionStorageClassResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListStorageV1VolumeAttachmentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeListStorageV1VolumeAttachmentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ListStorageV1VolumeAttachment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListStorageV1VolumeAttachmentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateStorageV1VolumeAttachmentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCreateStorageV1VolumeAttachmentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCreateStorageV1VolumeAttachmentRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateStorageV1VolumeAttachment(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateStorageV1VolumeAttachmentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteStorageV1CollectionVolumeAttachmentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeDeleteStorageV1CollectionVolumeAttachmentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeDeleteStorageV1CollectionVolumeAttachmentRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteStorageV1CollectionVolumeAttachment(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteStorageV1CollectionVolumeAttachmentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchStorageV1CSIDriverListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchStorageV1CSIDriverList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchStorageV1CSIDriverListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchStorageV1CSINodeListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchStorageV1CSINodeList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchStorageV1CSINodeListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchStorageV1StorageClassListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchStorageV1StorageClassList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchStorageV1StorageClassListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchStorageV1VolumeAttachmentListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchStorageV1VolumeAttachmentList(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchStorageV1VolumeAttachmentListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetStorageV1alpha1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetStorageV1alpha1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetStorageV1alpha1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListStorageV1alpha1CSIStorageCapacityForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListStorageV1alpha1CSIStorageCapacityForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetStorageV1beta1APIResourcesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetStorageV1beta1APIResources(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetStorageV1beta1APIResourcesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewListStorageV1beta1CSIStorageCapacityForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ListStorageV1beta1CSIStorageCapacityForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewLogFileListHandlerHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.LogFileListHandler(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeLogFileListHandlerResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetServiceAccountIssuerOpenIDKeysetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetServiceAccountIssuerOpenIDKeyset(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetServiceAccountIssuerOpenIDKeysetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetCodeVersionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetCodeVersion(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetCodeVersionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func respondError(w http.ResponseWriter, code int, err error) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	data, writeErr := json.Marshal(struct {
		ErrorMessage string `json:"error_message"`
	}{
		ErrorMessage: err.Error(),
	})
	if writeErr == nil {
		w.Write(data)
	}
}
