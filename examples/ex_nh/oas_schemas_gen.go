// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
)

// Ref: #/components/schemas/Book
type Book struct {
	ID           OptInt    `json:"id"`
	Images       OptImages `json:"images"`
	MediaID      OptInt    `json:"media_id"`
	NumFavorites OptInt    `json:"num_favorites"`
	NumPages     OptInt    `json:"num_pages"`
	Scanlator    OptString `json:"scanlator"`
	Tags         []Tag     `json:"tags"`
	Title        OptTitle  `json:"title"`
	UploadDate   OptInt    `json:"upload_date"`
}

func (*Book) getBookRes() {}

// GetBookResForbidden is response for GetBook operation.
type GetBookResForbidden struct{}

func (*GetBookResForbidden) getBookRes() {}

type GetPageCoverImageOKImage string

func (*GetPageCoverImageOKImage) getPageCoverImageRes() {}

// GetPageCoverImageResForbidden is response for GetPageCoverImage operation.
type GetPageCoverImageResForbidden struct{}

func (*GetPageCoverImageResForbidden) getPageCoverImageRes() {}

type GetPageImageOKImage string

func (*GetPageImageOKImage) getPageImageRes() {}

// GetPageImageResForbidden is response for GetPageImage operation.
type GetPageImageResForbidden struct{}

func (*GetPageImageResForbidden) getPageImageRes() {}

type GetPageThumbnailImageOKImage string

func (*GetPageThumbnailImageOKImage) getPageThumbnailImageRes() {}

// GetPageThumbnailImageResForbidden is response for GetPageThumbnailImage operation.
type GetPageThumbnailImageResForbidden struct{}

func (*GetPageThumbnailImageResForbidden) getPageThumbnailImageRes() {}

// Ref: #/components/schemas/Image
type Image struct {
	H OptInt    `json:"h"`
	T OptString `json:"t"`
	W OptInt    `json:"w"`
}

// Ref: #/components/schemas/Images
type Images struct {
	Cover     OptImage `json:"cover"`
	Pages     []Image  `json:"pages"`
	Thumbnail OptImage `json:"thumbnail"`
}

// NewOptImage returns new OptImage with value set to v.
func NewOptImage(v Image) OptImage {
	return OptImage{
		Value: v,
		Set:   true,
	}
}

// OptImage is optional Image.
type OptImage struct {
	Value Image
	Set   bool
}

// IsSet returns true if OptImage was set.
func (o OptImage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImage) Reset() {
	var v Image
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImage) SetTo(v Image) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImage) Get() (v Image, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptImages returns new OptImages with value set to v.
func NewOptImages(v Images) OptImages {
	return OptImages{
		Value: v,
		Set:   true,
	}
}

// OptImages is optional Images.
type OptImages struct {
	Value Images
	Set   bool
}

// IsSet returns true if OptImages was set.
func (o OptImages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImages) Reset() {
	var v Images
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImages) SetTo(v Images) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImages) Get() (v Images, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptTagType returns new OptTagType with value set to v.
func NewOptTagType(v TagType) OptTagType {
	return OptTagType{
		Value: v,
		Set:   true,
	}
}

// OptTagType is optional TagType.
type OptTagType struct {
	Value TagType
	Set   bool
}

// IsSet returns true if OptTagType was set.
func (o OptTagType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTagType) Reset() {
	var v TagType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTagType) SetTo(v TagType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTagType) Get() (v TagType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptTitle returns new OptTitle with value set to v.
func NewOptTitle(v Title) OptTitle {
	return OptTitle{
		Value: v,
		Set:   true,
	}
}

// OptTitle is optional Title.
type OptTitle struct {
	Value Title
	Set   bool
}

// IsSet returns true if OptTitle was set.
func (o OptTitle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTitle) Reset() {
	var v Title
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTitle) SetTo(v Title) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTitle) Get() (v Title, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

type SearchByTagIDOKApplicationJSON []SearchResponse

func (*SearchByTagIDOKApplicationJSON) searchByTagIDRes() {}

// SearchByTagIDResForbidden is response for SearchByTagID operation.
type SearchByTagIDResForbidden struct{}

func (*SearchByTagIDResForbidden) searchByTagIDRes() {}

type SearchOKApplicationJSON []SearchResponse

func (*SearchOKApplicationJSON) searchRes() {}

// SearchResForbidden is response for Search operation.
type SearchResForbidden struct{}

func (*SearchResForbidden) searchRes() {}

// Ref: #/components/schemas/SearchResponse
type SearchResponse struct {
	NumPages OptInt `json:"num_pages"`
	PerPage  OptInt `json:"per_page"`
	Result   []Book `json:"result"`
}

// Ref: #/components/schemas/Tag
type Tag struct {
	Count OptInt     `json:"count"`
	ID    OptInt     `json:"id"`
	Name  OptString  `json:"name"`
	Type  OptTagType `json:"type"`
	URL   OptString  `json:"url"`
}

type TagType string

const (
	TagTypeParody    TagType = "parody"
	TagTypeCharacter TagType = "character"
	TagTypeTag       TagType = "tag"
	TagTypeArtist    TagType = "artist"
	TagTypeGroup     TagType = "group"
	TagTypeCategory  TagType = "category"
	TagTypeLanguage  TagType = "language"
)

// Ref: #/components/schemas/Title
type Title struct {
	English  OptString `json:"english"`
	Japanese OptString `json:"japanese"`
	Pretty   OptString `json:"pretty"`
}
