// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func (s *Book) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.ID
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Images
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "images",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.MediaID
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "media_id",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.NumFavorites
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "num_favorites",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.NumPages
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "num_pages",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Tags {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Tags
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Image) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.H
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "h",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.W
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "w",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Images) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Cover
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cover",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Pages {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Pages
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pages",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Thumbnail
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "thumbnail",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SearchResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Result {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Result
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Tag) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.ID
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Type
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
