// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func encodeFoobarGetResponse(response FoobarGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Pet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		return json.NewEncoder(w).Encode(response)
	case *NotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/foobar: unexpected response type for method: %T", response)
	}
}

func encodeFoobarPutResponse(response *FoobarPutDefault, w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

func encodeFoobarPostResponse(response FoobarPostResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Pet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		return json.NewEncoder(w).Encode(response)
	case *NotFound:
		w.WriteHeader(404)
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		return json.NewEncoder(w).Encode(response.Response)
	default:
		return fmt.Errorf("/foobar: unexpected response type for method: %T", response)
	}
}

func encodePetGetResponse(response PetGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Pet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		return json.NewEncoder(w).Encode(response)
	case *PetGetDefaultStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		return json.NewEncoder(w).Encode(response.Response)
	default:
		return fmt.Errorf("/pet: unexpected response type for method: %T", response)
	}
}

func encodePetCreateResponse(response *Pet, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}

func encodePetGetByNameResponse(response *Pet, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	return json.NewEncoder(w).Encode(response)
}
