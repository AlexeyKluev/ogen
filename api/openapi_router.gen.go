// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strings"

	"github.com/go-chi/chi/v5"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
)

func Register(r chi.Router, s Server) {
	r.Route("/pet", func(r chi.Router) {
		r.Method("GET", "/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			resp, err := s.PetGet(r.Context())
			if err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				return
			}

			b, err := json.Marshal(resp)
			if err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				return
			}

			w.Header().Set("content-type", "application/json")
			w.WriteHeader(http.StatusOK)
			io.Copy(w, bytes.NewReader(b))
		}))
		r.Method("POST", "/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var req Pet
			if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				return
			}

			resp, err := s.PetCreate(r.Context(), &req)
			if err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				return
			}

			b, err := json.Marshal(resp)
			if err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				return
			}

			w.Header().Set("content-type", "application/json")
			w.WriteHeader(http.StatusOK)
			io.Copy(w, bytes.NewReader(b))
		}))
	})
}
