// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func DecodeFoobarPostRequest(r *http.Request) (*Pet, error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request Pet
		if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
			if errors.Is(err, io.EOF) {
				return nil, nil
			}
			return nil, err
		}

		return &request, nil
	default:
		return nil, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func DecodePetPostRequest(r *http.Request) (PetPostRequest, error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request Pet
		if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
			if errors.Is(err, io.EOF) {
				return nil, nil
			}
			return nil, err
		}

		return &request, nil
	case "text/plain":
		var request PetPostTextPlainRequest
		_ = request
		return nil, fmt.Errorf("text/plain decoder not implemented")
	default:
		return nil, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}
