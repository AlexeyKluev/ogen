// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

type PetGetParameters struct {
	Cookie PetGetCookieParameters
	Header PetGetHeaderParameters
	Query  PetGetQueryParameters
}

type PetGetCookieParameters struct {
	Token string
}

type PetGetHeaderParameters struct {
	XScope []string
}

type PetGetQueryParameters struct {
	PetID int64
}

func ParsePetGetParameters(r *http.Request) (*PetGetParameters, error) {
	var parameters PetGetParameters

	{
		c, err := r.Cookie("token")
		if err != nil {
			return nil, fmt.Errorf("cookie param token: %w", err)
		}

		param := c.Value

		v, err := conv.ToString(param)
		if err != nil {
			return nil, fmt.Errorf("param Cookie token parse: %w", err)
		}

		parameters.Cookie.Token = v
	}
	{
		param := r.Header.Values("x-scope")

		v, err := conv.ToStringArray(param)
		if err != nil {
			return nil, fmt.Errorf("param Header x-scope parse: %w", err)
		}

		parameters.Header.XScope = v
	}
	{
		param := r.URL.Query().Get("petID")

		v, err := conv.ToInt64(param)
		if err != nil {
			return nil, fmt.Errorf("param Query petID parse: %w", err)
		}

		parameters.Query.PetID = v
	}

	return &parameters, nil
}

type PetGetByNameParameters struct {
	Path PetGetByNamePathParameters
}

type PetGetByNamePathParameters struct {
	Name string
}

func ParsePetGetByNameParameters(r *http.Request) (*PetGetByNameParameters, error) {
	var parameters PetGetByNameParameters

	{
		param := chi.URLParam(r, "name")

		v, err := conv.ToString(param)
		if err != nil {
			return nil, fmt.Errorf("param Path name parse: %w", err)
		}

		parameters.Path.Name = v
	}

	return &parameters, nil
}
